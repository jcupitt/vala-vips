/* vips.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Vips", gir_namespace = "Vips", gir_version = "8.0", lower_case_cprefix = "vips_")]
namespace Vips {
	[CCode (cheader_filename = "vips/vips.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "vips_area_get_type ()")]
	[Compact]
	public class Area {
		public void* data;
		public size_t length;
		public int n;
		[CCode (has_construct_function = false)]
		public Area ([CCode (scope = "async")] Vips.CallbackFn? free_fn);
		[CCode (has_construct_function = false)]
		public Area.array (GLib.Type type, size_t sizeof_type, int n);
		[CCode (has_construct_function = false)]
		public Area.array_object (int n);
		public Vips.Area copy ();
		public static int free_cb (void* mem, Vips.Area area);
		public void* get_data (out size_t length, out int n, out GLib.Type type, out size_t sizeof_type);
		public void unref ();
	}
	[CCode (cheader_filename = "vips/vips.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "vips_array_double_get_type ()")]
	[Compact]
	public class ArrayDouble {
		public weak Vips.Area area;
		[CCode (has_construct_function = false)]
		public ArrayDouble ([CCode (array_length_cname = "n", array_length_pos = 1.1)] double[] array);
		[CCode (array_length_pos = 0.1)]
		public unowned double[] @get ();
	}
	[CCode (cheader_filename = "vips/vips.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "vips_array_image_get_type ()")]
	[Compact]
	public class ArrayImage {
		public weak Vips.Area area;
		[CCode (has_construct_function = false)]
		public ArrayImage ([CCode (array_length_cname = "n", array_length_pos = 1.1)] Vips.Image[] array);
		public Vips.ArrayImage append (Vips.Image image);
		[CCode (cname = "vips_array_image_empty", has_construct_function = false)]
		public ArrayImage.empty ();
		[CCode (has_construct_function = false)]
		public ArrayImage.from_string (string string, Vips.Access flags);
		[CCode (array_length_pos = 0.1)]
		public unowned Vips.Image[] @get ();
	}
	[CCode (cheader_filename = "vips/vips.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "vips_array_int_get_type ()")]
	[Compact]
	public class ArrayInt {
		public weak Vips.Area area;
		[CCode (has_construct_function = false)]
		public ArrayInt ([CCode (array_length_cname = "n", array_length_pos = 1.1)] int[] array);
		[CCode (array_length_pos = 0.1)]
		public unowned int[] @get ();
	}
	[CCode (cheader_filename = "vips/vips.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "vips_blob_get_type ()")]
	[Compact]
	public class Blob {
		public weak Vips.Area area;
		[CCode (has_construct_function = false)]
		public Blob ([CCode (scope = "async")] Vips.CallbackFn? free_fn, [CCode (array_length_cname = "length", array_length_pos = 2.1, array_length_type = "gsize")] owned uint8[] data);
		public static Vips.Blob copy ([CCode (array_length_cname = "length", array_length_pos = 1.1, array_length_type = "gsize")] uint8[] data);
		[CCode (array_length_pos = 0.1, array_length_type = "gsize")]
		public unowned uint8[] @get ();
		public void @set ([CCode (scope = "async")] Vips.CallbackFn? free_fn, [CCode (array_length_cname = "length", array_length_pos = 2.1, array_length_type = "gsize")] owned uint8[] data);
	}
	[CCode (cheader_filename = "vips/vips.h", has_type_id = false)]
	[Compact]
	public class Buf {
	}
	[CCode (cheader_filename = "vips/vips.h", type_id = "vips_foreign_get_type ()")]
	public abstract class Foreign : Vips.Operation {
		[CCode (has_construct_function = false)]
		protected Foreign ();
		public static unowned string find_load (string filename);
		public static unowned string find_load_buffer ([CCode (array_length_cname = "size", array_length_pos = 1.1, array_length_type = "gsize")] uint8[] data);
		public static unowned string find_load_source (Vips.Source source);
		public static unowned string? find_save (string filename);
		public static unowned string? find_save_buffer (string suffix);
		public static unowned string? find_save_target (string suffix);
		public static Vips.ForeignFlags flags (string loader, string filename);
		[CCode (array_length = false)]
		public static string[] get_suffixes ();
		public static bool is_a (string loader, string filename);
		public static bool is_a_buffer (string loader, [CCode (array_length_cname = "size", array_length_pos = 2.1, array_length_type = "gsize")] uint8[] data);
		public static bool is_a_source (string loader, Vips.Source source);
		public static void* map (string @base, Vips.SListMap2Fn fn, void* a, void* b);
	}
	[CCode (cheader_filename = "vips/vips.h", type_id = "vips_foreign_load_get_type ()")]
	public abstract class ForeignLoad : Vips.Foreign {
		public bool error;
		public bool nocache;
		public weak Vips.Image real;
		[CCode (has_construct_function = false)]
		protected ForeignLoad ();
		[NoWrapper]
		public virtual Vips.ForeignFlags get_flags ();
		[NoWrapper]
		public virtual int header ();
		[NoWrapper]
		public virtual int load ();
		[NoAccessorMethod]
		public Vips.Access access { get; set; }
		[NoAccessorMethod]
		public bool disc { get; set; }
		[NoAccessorMethod]
		public bool fail { get; set; }
		[NoAccessorMethod]
		public Vips.FailOn fail_on { get; set; }
		[NoAccessorMethod]
		public Vips.ForeignFlags flags { get; set; }
		[NoAccessorMethod]
		public bool memory { get; set; }
		[NoAccessorMethod]
		public Vips.Image @out { owned get; set; }
		[NoAccessorMethod]
		public bool sequential { get; set; }
	}
	[CCode (cheader_filename = "vips/vips.h", type_id = "vips_foreign_save_get_type ()")]
	public abstract class ForeignSave : Vips.Foreign {
		public weak Vips.Image ready;
		[CCode (has_construct_function = false)]
		protected ForeignSave ();
		[NoAccessorMethod]
		public Vips.ArrayDouble background { owned get; set; }
		[NoAccessorMethod]
		public Vips.Image @in { owned get; set; }
		[NoAccessorMethod]
		public int page_height { get; set; }
		[NoAccessorMethod]
		public bool strip { get; set; }
	}
	[CCode (cheader_filename = "vips/vips.h", type_id = "vips_image_get_type ()")]
	public class Image : Vips.Object {
		[CCode (has_construct_function = false)]
		public Image ();
		[CCode (cname = "vips_autorot_remove_angle")]
		public void autorot_remove_angle ();
		[CCode (cname = "vips_colourspace_issupported")]
		public bool colourspace_issupported ();
		public Vips.Image copy_memory ();
		public int decode (out Vips.Image @out);
		public int decode_predict (out int bands, out Vips.BandFormat format);
		public int encode (out Vips.Image @out, Vips.Coding coding);
		[CCode (cname = "vips_foreign_load_invalidate")]
		public void foreign_load_invalidate ();
		public void free_buffer (void* buffer);
		[CCode (has_construct_function = false)]
		public Image.from_file_RW (string filename);
		[CCode (has_construct_function = false)]
		public Image.from_file_raw (string filename, int xsize, int ysize, int bands, uint64 offset);
		[CCode (has_construct_function = false)]
		public Image.from_image (Vips.Image image, [CCode (array_length_cname = "n", array_length_pos = 2.1)] double[] c);
		[CCode (has_construct_function = false)]
		public Image.from_image1 (Vips.Image image, double c);
		[CCode (has_construct_function = false)]
		public Image.from_memory ([CCode (array_length_cname = "size", array_length_pos = 1.5, array_length_type = "gsize")] uint8[] data, int width, int height, int bands, Vips.BandFormat format);
		[CCode (has_construct_function = false)]
		public Image.from_memory_copy ([CCode (array_length_cname = "size", array_length_pos = 1.5, array_length_type = "gsize")] uint8[] data, int width, int height, int bands, Vips.BandFormat format);
		public int @get (string name, out GLib.Value value_copy);
		public int get_area (string name, out void* data);
		public int get_array_double (string name, [CCode (array_length_cname = "n", array_length_pos = 2.1)] out unowned double[] @out);
		public int get_array_int (string name, [CCode (array_length_cname = "n", array_length_pos = 2.1)] out unowned int[] @out);
		public int get_as_string (string name, out string @out);
		public int get_bands ();
		public int get_blob (string name, [CCode (array_length_cname = "length", array_length_pos = 2.1, array_length_type = "gsize")] out uint8[] data);
		public Vips.Coding get_coding ();
		public void* get_data ();
		public int get_double (string name, out double @out);
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] get_fields ();
		public unowned string get_filename ();
		public Vips.BandFormat get_format ();
		public static double get_format_max (Vips.BandFormat format);
		public int get_height ();
		public unowned string get_history ();
		public int get_image (string name, out Vips.Image @out);
		public int get_int (string name, out int @out);
		public Vips.Interpretation get_interpretation ();
		public unowned string get_mode ();
		public int get_n_pages ();
		public int get_n_subifds ();
		public double get_offset ();
		public int get_orientation ();
		public bool get_orientation_swap ();
		public int get_page_height ();
		public double get_scale ();
		public int get_string (string name, out unowned string @out);
		public GLib.Type get_typeof (string name);
		public int get_width ();
		public int get_xoffset ();
		public double get_xres ();
		public int get_yoffset ();
		public double get_yres ();
		public Vips.BandFormat guess_format ();
		public Vips.Interpretation guess_interpretation ();
		public bool hasalpha ();
		public int history_args (string name, [CCode (array_length_cname = "argc", array_length_pos = 1.5)] string[] argv);
		[CCode (cname = "vips_icc_ac2rc")]
		public int icc_ac2rc (out Vips.Image @out, string profile_filename);
		public void init_fields (int xsize, int ysize, int bands, Vips.BandFormat format, Vips.Coding coding, Vips.Interpretation interpretation, double xres, double yres);
		public int inplace ();
		public void invalidate_all ();
		public bool isMSBfirst ();
		public bool is_sequential ();
		public bool isfile ();
		public bool iskilled ();
		public bool ispartial ();
		public void* map ([CCode (delegate_target_pos = 0.5)] void* a);
		[CCode (has_construct_function = false)]
		public Image.matrix (int width, int height);
		[CCode (has_construct_function = false)]
		public Image.matrix_from_array (int width, int height, [CCode (array_length_cname = "size", array_length_pos = 3.1, array_length_type = "gsize")] double[] array);
		[CCode (cname = "vips_image_memory", has_construct_function = false)]
		public Image.memory ();
		public void minimise_all ();
		public int pio_input ();
		public int pio_output ();
		public void print_field (string name);
		public bool remove (string name);
		[CCode (cname = "vips_reorder_margin_hint")]
		public void reorder_margin_hint (int margin);
		[CCode (cname = "vips_reorder_prepare_many")]
		public int reorder_prepare_many ([CCode (array_length = false)] Vips.Region[] regions, Vips.Rect r);
		public void @set (string name, GLib.Value value);
		public void set_area (string name, [CCode (scope = "async")] Vips.CallbackFn? free_fn);
		public void set_array_double (string name, [CCode (array_length_cname = "n", array_length_pos = 2.1)] double[]? array);
		public void set_array_int (string name, [CCode (array_length_cname = "n", array_length_pos = 2.1)] int[]? array);
		public void set_blob (string name, [CCode (scope = "async")] Vips.CallbackFn? free_fn, [CCode (array_length_cname = "length", array_length_pos = 3.1, array_length_type = "gsize")] owned uint8[] data);
		public void set_blob_copy (string name, [CCode (array_length_cname = "length", array_length_pos = 2.1, array_length_type = "gsize")] uint8[] data);
		public void set_delete_on_close (bool delete_on_close);
		public void set_double (string name, double d);
		public void set_image (string name, Vips.Image im);
		public void set_int (string name, int i);
		public void set_kill (bool kill);
		public void set_progress (bool progress);
		public void set_string (string name, string str);
		[CCode (has_construct_function = false)]
		public Image.temp_file (string format);
		public int wio_input ();
		public int write (out Vips.Image @out);
		public int write_line (int ypos, Vips.Pel linebuffer);
		public int write_prepare ();
		[CCode (array_length_pos = 0.1, array_length_type = "gsize")]
		public uint8[] write_to_memory ();
		[NoAccessorMethod]
		public int bands { get; set; }
		[NoAccessorMethod]
		public Vips.Coding coding { get; set; }
		[NoAccessorMethod]
		public Vips.DemandStyle demand { get; set; }
		[NoAccessorMethod]
		public string filename { owned get; set; }
		[NoAccessorMethod]
		public void* foreign_buffer { get; set; }
		[NoAccessorMethod]
		public Vips.BandFormat format { get; set; }
		[NoAccessorMethod]
		public int height { get; set; }
		[NoAccessorMethod]
		public Vips.Interpretation interpretation { get; set; }
		[NoAccessorMethod]
		public bool kill { get; set; }
		[NoAccessorMethod]
		public string mode { owned get; set; }
		[NoAccessorMethod]
		public uint64 sizeof_header { get; set; }
		[NoAccessorMethod]
		public int width { get; set; }
		[NoAccessorMethod]
		public int xoffset { get; set; }
		[NoAccessorMethod]
		public double xres { get; set; }
		[NoAccessorMethod]
		public int yoffset { get; set; }
		[NoAccessorMethod]
		public double yres { get; set; }
		public virtual signal void eval (Vips.Progress progress);
		public virtual signal void invalidate ();
		public virtual signal void minimise ();
		public virtual signal void posteval (Vips.Progress progress);
		public virtual signal void preeval (Vips.Progress progress);
		public virtual signal void written (out int result);
	}
	[CCode (cheader_filename = "vips/vips.h", type_id = "vips_interpolate_get_type ()")]
	public abstract class Interpolate : Vips.Object {
		[CCode (has_construct_function = false)]
		public Interpolate (string nickname);
		public static unowned Vips.Interpolate bilinear_static ();
		public virtual int get_window_offset ();
		public virtual int get_window_size ();
		[NoWrapper]
		public virtual void interpolate (void* @out, Vips.Region @in, double x, double y);
		public static unowned Vips.Interpolate nearest_static ();
	}
	[CCode (cheader_filename = "vips/vips.h", type_id = "vips_object_get_type ()")]
	public abstract class Object : GLib.Object {
		public bool constructed;
		public size_t local_memory;
		public bool static_object;
		[CCode (has_construct_function = false)]
		protected Object ();
		public bool argument_isset (string name);
		public bool argument_needsstring (string name);
		public virtual int build ();
		public Vips.ArgumentFlags get_argument_flags (string name);
		public int get_argument_priority (string name);
		public int get_argument_to_string (string name, string arg);
		public unowned string get_description ();
		public static void get_property (GLib.Object gobject, uint property_id, GLib.Value value, GLib.ParamSpec pspec);
		[CCode (cname = "vips_object_class_install_argument")]
		public class void install_argument (GLib.ParamSpec pspec, Vips.ArgumentFlags flags, int priority, uint offset);
		public void local_cb (GLib.Object gobject);
		[NoWrapper]
		public virtual int output_to_arg (string string);
		public static void print_all ();
		public void print_dump ();
		public void print_name ();
		public void print_summary ();
		public virtual void rewind ();
		[NoWrapper]
		public virtual void sanity (Vips.Buf buf);
		public static void sanity_all ();
		public int set_argument_from_string (string name, string value);
		public int set_from_string (string string);
		public static void set_property (GLib.Object gobject, uint property_id, GLib.Value value, GLib.ParamSpec pspec);
		public int set_required (string value);
		public void set_static (bool static_object);
		public virtual void to_string (Vips.Buf buf);
		public void unref_outputs ();
		[NoAccessorMethod]
		public string description { owned get; set; }
		[NoAccessorMethod]
		public string nickname { owned get; set; }
		public virtual signal void close ();
		public virtual signal int postbuild ();
		public virtual signal void postclose ();
		[HasEmitter]
		public virtual signal void preclose ();
	}
	[CCode (cheader_filename = "vips/vips.h", type_id = "vips_operation_get_type ()")]
	public abstract class Operation : Vips.Object {
		public bool found_hash;
		public uint hash;
		public int pixels;
		[CCode (has_construct_function = false)]
		public Operation (string name);
		public static void block_set (string name, bool state);
		public virtual Vips.OperationFlags get_flags ();
		[HasEmitter]
		public virtual signal void invalidate ();
	}
	[CCode (cheader_filename = "vips/vips.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "vips_ref_string_get_type ()")]
	[Compact]
	public class RefString {
		public weak Vips.Area area;
		[CCode (has_construct_function = false)]
		public RefString (string str);
		public unowned string @get (out size_t length);
	}
	[CCode (cheader_filename = "vips/vips.h", type_id = "vips_region_get_type ()")]
	public class Region : Vips.Object {
		public weak Vips.Image im;
		public Vips.Rect valid;
		[CCode (has_construct_function = false)]
		public Region (Vips.Image image);
		public void black ();
		public int buffer (Vips.Rect r);
		public void copy (ref Vips.Region dest, Vips.Rect r, int x, int y);
		public int equalsregion (Vips.Region reg2);
		public Vips.Pel fetch (int left, int top, int width, int height, size_t len);
		public int height ();
		public int image (Vips.Rect r);
		public void invalidate ();
		public void paint (Vips.Rect r, int value);
		public void paint_pel (Vips.Rect r, Vips.Pel ink);
		public int position (int x, int y);
		public int prepare (Vips.Rect r);
		public int prepare_to (Vips.Region dest, Vips.Rect r, int x, int y);
		public int region (Vips.Region dest, Vips.Rect r, int x, int y);
		public int shrink_method (ref Vips.Region to, Vips.Rect target, Vips.RegionShrink method);
		public int width ();
	}
	[CCode (cheader_filename = "vips/vips.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "vips_save_string_get_type ()")]
	[Compact]
	public class SaveString {
	}
	[CCode (cheader_filename = "vips/vips.h", has_type_id = false)]
	[Compact]
	public class Source {
	}
	[CCode (cheader_filename = "vips/vips.h", has_type_id = false)]
	[Compact]
	public class Target {
	}
	[CCode (cheader_filename = "vips/vips.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "vips_thing_get_type ()")]
	[Compact]
	public class Thing {
		public int i;
		[CCode (has_construct_function = false)]
		public Thing (int i);
	}
	[CCode (cheader_filename = "vips/vips.h")]
	[SimpleType]
	public struct Pel : uint8 {
	}
	[CCode (cheader_filename = "vips/vips.h", has_type_id = false)]
	public struct Progress {
		public int run;
		public int eta;
		public int64 tpels;
		public int64 npels;
		public int percent;
		public weak GLib.Timer start;
		public static void @set (bool progress);
	}
	[CCode (cheader_filename = "vips/vips.h", has_type_id = false)]
	public struct Rect {
		public int left;
		public int top;
		public int width;
		public int height;
		public bool equalsrect (Vips.Rect r2);
		public bool includespoint (int x, int y);
		public bool includesrect (Vips.Rect r2);
		public Vips.Rect intersectrect (Vips.Rect r2);
		public bool isempty ();
		public void marginadjust (int n);
		public void normalise ();
		public bool overlapsrect (Vips.Rect r2);
		public Vips.Rect unionrect (Vips.Rect r2);
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_ACCESS_", type_id = "vips_access_get_type ()")]
	public enum Access {
		RANDOM,
		SEQUENTIAL,
		SEQUENTIAL_UNBUFFERED,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_ALIGN_", type_id = "vips_align_get_type ()")]
	public enum Align {
		LOW,
		CENTRE,
		HIGH,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_ANGLE_", type_id = "vips_angle_get_type ()")]
	public enum Angle {
		D0,
		D90,
		D180,
		D270,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_ANGLE45_", type_id = "vips_angle45_get_type ()")]
	public enum Angle45 {
		D0,
		D45,
		D90,
		D135,
		D180,
		D225,
		D270,
		D315,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_ARGUMENT_", type_id = "vips_argument_flags_get_type ()")]
	[Flags]
	public enum ArgumentFlags {
		NONE,
		REQUIRED,
		CONSTRUCT,
		SET_ONCE,
		SET_ALWAYS,
		INPUT,
		OUTPUT,
		DEPRECATED,
		MODIFY
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_FORMAT_", type_id = "vips_band_format_get_type ()")]
	public enum BandFormat {
		NOTSET,
		UCHAR,
		CHAR,
		USHORT,
		SHORT,
		UINT,
		INT,
		FLOAT,
		COMPLEX,
		DOUBLE,
		DPCOMPLEX,
		LAST;
		public bool is8bit ();
		public bool iscomplex ();
		public bool isfloat ();
		public bool isint ();
		public bool isuint ();
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_BLEND_MODE_", type_id = "vips_blend_mode_get_type ()")]
	public enum BlendMode {
		CLEAR,
		SOURCE,
		OVER,
		IN,
		OUT,
		ATOP,
		DEST,
		DEST_OVER,
		DEST_IN,
		DEST_OUT,
		DEST_ATOP,
		XOR,
		ADD,
		SATURATE,
		MULTIPLY,
		SCREEN,
		OVERLAY,
		DARKEN,
		LIGHTEN,
		COLOUR_DODGE,
		COLOUR_BURN,
		HARD_LIGHT,
		SOFT_LIGHT,
		DIFFERENCE,
		EXCLUSION,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_CODING_", type_id = "vips_coding_get_type ()")]
	public enum Coding {
		ERROR,
		NONE,
		LABQ,
		RAD,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_COMBINE_", type_id = "vips_combine_get_type ()")]
	public enum Combine {
		MAX,
		SUM,
		MIN,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_COMBINE_MODE_", type_id = "vips_combine_mode_get_type ()")]
	public enum CombineMode {
		SET,
		ADD,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_COMPASS_DIRECTION_", type_id = "vips_compass_direction_get_type ()")]
	public enum CompassDirection {
		CENTRE,
		NORTH,
		EAST,
		SOUTH,
		WEST,
		NORTH_EAST,
		SOUTH_EAST,
		SOUTH_WEST,
		NORTH_WEST,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_DEMAND_STYLE_", type_id = "vips_demand_style_get_type ()")]
	public enum DemandStyle {
		ERROR,
		SMALLTILE,
		FATSTRIP,
		THINSTRIP,
		ANY
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_DIRECTION_", type_id = "vips_direction_get_type ()")]
	public enum Direction {
		HORIZONTAL,
		VERTICAL,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_EXTEND_", type_id = "vips_extend_get_type ()")]
	public enum Extend {
		BLACK,
		COPY,
		REPEAT,
		MIRROR,
		WHITE,
		BACKGROUND,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_FAIL_ON_", type_id = "vips_fail_on_get_type ()")]
	public enum FailOn {
		NONE,
		TRUNCATED,
		ERROR,
		WARNING,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_FOREIGN_DZ_CONTAINER_", type_id = "vips_foreign_dz_container_get_type ()")]
	public enum ForeignDzContainer {
		FS,
		ZIP,
		SZI,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_FOREIGN_DZ_DEPTH_", type_id = "vips_foreign_dz_depth_get_type ()")]
	public enum ForeignDzDepth {
		ONEPIXEL,
		ONETILE,
		ONE,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_FOREIGN_DZ_LAYOUT_", type_id = "vips_foreign_dz_layout_get_type ()")]
	public enum ForeignDzLayout {
		DZ,
		ZOOMIFY,
		GOOGLE,
		IIIF,
		IIIF3,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_FOREIGN_", type_id = "vips_foreign_flags_get_type ()")]
	[Flags]
	public enum ForeignFlags {
		NONE,
		PARTIAL,
		BIGENDIAN,
		SEQUENTIAL,
		ALL
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_FOREIGN_HEIF_COMPRESSION_", type_id = "vips_foreign_heif_compression_get_type ()")]
	public enum ForeignHeifCompression {
		HEVC,
		AVC,
		JPEG,
		AV1,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_FOREIGN_JPEG_SUBSAMPLE_", type_id = "vips_foreign_jpeg_subsample_get_type ()")]
	[Version (deprecated = true)]
	public enum ForeignJpegSubsample {
		AUTO,
		ON,
		OFF,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_FOREIGN_PNG_FILTER_", type_id = "vips_foreign_png_filter_get_type ()")]
	[Flags]
	public enum ForeignPngFilter {
		NONE,
		SUB,
		UP,
		AVG,
		PAETH,
		ALL
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_FOREIGN_PPM_FORMAT_", type_id = "vips_foreign_ppm_format_get_type ()")]
	public enum ForeignPpmFormat {
		PBM,
		PGM,
		PPM,
		PFM,
		PNM,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_FOREIGN_SUBSAMPLE_", type_id = "vips_foreign_subsample_get_type ()")]
	public enum ForeignSubsample {
		AUTO,
		ON,
		OFF,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_FOREIGN_TIFF_COMPRESSION_", type_id = "vips_foreign_tiff_compression_get_type ()")]
	public enum ForeignTiffCompression {
		NONE,
		JPEG,
		DEFLATE,
		PACKBITS,
		CCITTFAX4,
		LZW,
		WEBP,
		ZSTD,
		JP2K,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_FOREIGN_TIFF_PREDICTOR_", type_id = "vips_foreign_tiff_predictor_get_type ()")]
	public enum ForeignTiffPredictor {
		NONE,
		HORIZONTAL,
		FLOAT,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_FOREIGN_TIFF_RESUNIT_", type_id = "vips_foreign_tiff_resunit_get_type ()")]
	public enum ForeignTiffResunit {
		CM,
		INCH,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_FOREIGN_WEBP_PRESET_", type_id = "vips_foreign_webp_preset_get_type ()")]
	public enum ForeignWebpPreset {
		DEFAULT,
		PICTURE,
		PHOTO,
		DRAWING,
		ICON,
		TEXT,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_IMAGE_", type_id = "vips_image_type_get_type ()")]
	public enum ImageType {
		ERROR,
		NONE,
		SETBUF,
		SETBUF_FOREIGN,
		OPENIN,
		MMAPIN,
		MMAPINRW,
		OPENOUT,
		PARTIAL
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_INTENT_", type_id = "vips_intent_get_type ()")]
	public enum Intent {
		PERCEPTUAL,
		RELATIVE,
		SATURATION,
		ABSOLUTE,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_INTERESTING_", type_id = "vips_interesting_get_type ()")]
	public enum Interesting {
		NONE,
		CENTRE,
		ENTROPY,
		ATTENTION,
		LOW,
		HIGH,
		ALL,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_INTERPRETATION_", type_id = "vips_interpretation_get_type ()")]
	public enum Interpretation {
		ERROR,
		MULTIBAND,
		B_W,
		HISTOGRAM,
		XYZ,
		LAB,
		CMYK,
		LABQ,
		RGB,
		CMC,
		LCH,
		LABS,
		[CCode (cname = "VIPS_INTERPRETATION_sRGB")]
		SRGB,
		YXY,
		FOURIER,
		RGB16,
		GREY16,
		MATRIX,
		[CCode (cname = "VIPS_INTERPRETATION_scRGB")]
		SCRGB,
		HSV,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_KERNEL_", type_id = "vips_kernel_get_type ()")]
	public enum Kernel {
		NEAREST,
		LINEAR,
		CUBIC,
		MITCHELL,
		LANCZOS2,
		LANCZOS3,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_OPERATION_BOOLEAN_", type_id = "vips_operation_boolean_get_type ()")]
	public enum OperationBoolean {
		AND,
		OR,
		EOR,
		LSHIFT,
		RSHIFT,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_OPERATION_COMPLEX_", type_id = "vips_operation_complex_get_type ()")]
	public enum OperationComplex {
		POLAR,
		RECT,
		CONJ,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_OPERATION_COMPLEX2_", type_id = "vips_operation_complex2_get_type ()")]
	public enum OperationComplex2 {
		CROSS_PHASE,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_OPERATION_COMPLEXGET_", type_id = "vips_operation_complexget_get_type ()")]
	public enum OperationComplexget {
		REAL,
		IMAG,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_OPERATION_", type_id = "vips_operation_flags_get_type ()")]
	[Flags]
	public enum OperationFlags {
		NONE,
		SEQUENTIAL,
		SEQUENTIAL_UNBUFFERED,
		NOCACHE,
		DEPRECATED,
		UNTRUSTED,
		BLOCKED
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_OPERATION_MATH_", type_id = "vips_operation_math_get_type ()")]
	public enum OperationMath {
		SIN,
		COS,
		TAN,
		ASIN,
		ACOS,
		ATAN,
		LOG,
		LOG10,
		EXP,
		EXP10,
		SINH,
		COSH,
		TANH,
		ASINH,
		ACOSH,
		ATANH,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_OPERATION_MATH2_", type_id = "vips_operation_math2_get_type ()")]
	public enum OperationMath2 {
		POW,
		WOP,
		ATAN2,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_OPERATION_MORPHOLOGY_", type_id = "vips_operation_morphology_get_type ()")]
	public enum OperationMorphology {
		ERODE,
		DILATE,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_OPERATION_RELATIONAL_", type_id = "vips_operation_relational_get_type ()")]
	public enum OperationRelational {
		EQUAL,
		NOTEQ,
		LESS,
		LESSEQ,
		MORE,
		MOREEQ,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_OPERATION_ROUND_", type_id = "vips_operation_round_get_type ()")]
	public enum OperationRound {
		RINT,
		CEIL,
		FLOOR,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_PCS_", type_id = "vips_pcs_get_type ()")]
	public enum PCS {
		LAB,
		XYZ,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_PRECISION_", type_id = "vips_precision_get_type ()")]
	public enum Precision {
		INTEGER,
		FLOAT,
		APPROXIMATE,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_REGION_SHRINK_", type_id = "vips_region_shrink_get_type ()")]
	public enum RegionShrink {
		MEAN,
		MEDIAN,
		MODE,
		MAX,
		MIN,
		NEAREST,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_SAVEABLE_", type_id = "vips_saveable_get_type ()")]
	public enum Saveable {
		MONO,
		RGB,
		RGBA,
		RGBA_ONLY,
		RGB_CMYK,
		ANY,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_SIZE_", type_id = "vips_size_get_type ()")]
	public enum Size {
		BOTH,
		UP,
		DOWN,
		FORCE,
		LAST
	}
	[CCode (cheader_filename = "vips/vips.h", cprefix = "VIPS_TOKEN_", type_id = "vips_token_get_type ()")]
	public enum Token {
		LEFT,
		RIGHT,
		STRING,
		EQUALS,
		COMMA
	}
	[CCode (cheader_filename = "vips/vips.h", has_target = false)]
	public delegate int CallbackFn (void* a, void* b);
	[CCode (cheader_filename = "vips/vips.h", has_target = false)]
	public delegate int GenerateFn (Vips.Region @out, void* seq, void* a, void* b, bool stop);
	[CCode (cheader_filename = "vips/vips.h", has_target = false)]
	public delegate void* ImageMapFn (Vips.Image image, string name, GLib.Value value, void* a);
	[CCode (cheader_filename = "vips/vips.h", has_target = false)]
	public delegate void InterpolateMethod (Vips.Interpolate interpolate, void* @out, Vips.Region @in, double x, double y);
	[CCode (cheader_filename = "vips/vips.h", has_target = false)]
	public delegate void* ObjectSetArguments (Vips.Object object, void* a, void* b);
	[CCode (cheader_filename = "vips/vips.h", has_target = false)]
	public delegate bool OperationBuildFn (Vips.Object object);
	[CCode (cheader_filename = "vips/vips.h", has_target = false)]
	public delegate void* SListFold2Fn (void* item, void* a, void* b, void* c);
	[CCode (cheader_filename = "vips/vips.h", has_target = false)]
	public delegate void* SListMap2Fn (void* item, void* a, void* b);
	[CCode (cheader_filename = "vips/vips.h", has_target = false)]
	public delegate void* SListMap4Fn (void* item, void* a, void* b, void* c, void* d);
	[CCode (cheader_filename = "vips/vips.h", has_target = false)]
	public delegate void* StartFn (Vips.Image @out, void* a, void* b);
	[CCode (cheader_filename = "vips/vips.h", has_target = false)]
	public delegate int StopFn (void* seq, void* a, void* b);
	[CCode (cheader_filename = "vips/vips.h", has_target = false)]
	public delegate void* TypeMap2Fn (GLib.Type type, void* a, void* b);
	[CCode (cheader_filename = "vips/vips.h", has_target = false)]
	public delegate void* TypeMapFn (GLib.Type type, void* a);
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_ARGUMENT_OPTIONAL_INPUT")]
	public const int ARGUMENT_OPTIONAL_INPUT;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_ARGUMENT_OPTIONAL_OUTPUT")]
	public const int ARGUMENT_OPTIONAL_OUTPUT;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_ARGUMENT_REQUIRED_INPUT")]
	public const int ARGUMENT_REQUIRED_INPUT;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_ARGUMENT_REQUIRED_OUTPUT")]
	public const int ARGUMENT_REQUIRED_OUTPUT;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_A_X0")]
	public const double A_X0;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_A_Y0")]
	public const double A_Y0;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_A_Z0")]
	public const double A_Z0;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_B_X0")]
	public const double B_X0;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_B_Y0")]
	public const double B_Y0;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_B_Z0")]
	public const double B_Z0;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_CONFIG")]
	public const string CONFIG;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_C_X0")]
	public const double C_X0;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_C_Y0")]
	public const double C_Y0;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_C_Z0")]
	public const double C_Z0;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_D3250_X0")]
	public const double D3250_X0;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_D3250_Y0")]
	public const double D3250_Y0;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_D3250_Z0")]
	public const double D3250_Z0;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_D50_X0")]
	public const double D50_X0;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_D50_Y0")]
	public const double D50_Y0;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_D50_Z0")]
	public const double D50_Z0;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_D55_X0")]
	public const double D55_X0;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_D55_Y0")]
	public const double D55_Y0;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_D55_Z0")]
	public const double D55_Z0;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_D65_X0")]
	public const double D65_X0;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_D65_Y0")]
	public const double D65_Y0;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_D65_Z0")]
	public const double D65_Z0;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_D75_X0")]
	public const double D75_X0;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_D75_Y0")]
	public const double D75_Y0;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_D75_Z0")]
	public const double D75_Z0;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_D93_X0")]
	public const double D93_X0;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_D93_Y0")]
	public const double D93_Y0;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_D93_Z0")]
	public const double D93_Z0;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_ENABLE_DEPRECATED")]
	public const int ENABLE_DEPRECATED;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_E_X0")]
	public const double E_X0;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_E_Y0")]
	public const double E_Y0;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_E_Z0")]
	public const double E_Z0;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_INTERPOLATE_SCALE")]
	public const int INTERPOLATE_SCALE;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_INTERPOLATE_SHIFT")]
	public const int INTERPOLATE_SHIFT;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_LIBRARY_AGE")]
	public const int LIBRARY_AGE;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_LIBRARY_CURRENT")]
	public const int LIBRARY_CURRENT;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_LIBRARY_REVISION")]
	public const int LIBRARY_REVISION;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_MAGIC_INTEL")]
	public const int MAGIC_INTEL;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_MAGIC_SPARC")]
	public const int MAGIC_SPARC;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_MAJOR_VERSION")]
	public const int MAJOR_VERSION;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_MAX_COORD")]
	public const int MAX_COORD;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_META_EXIF_NAME")]
	public const string META_EXIF_NAME;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_META_ICC_NAME")]
	public const string META_ICC_NAME;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_META_IMAGEDESCRIPTION")]
	public const string META_IMAGEDESCRIPTION;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_META_IPTC_NAME")]
	public const string META_IPTC_NAME;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_META_LOADER")]
	public const string META_LOADER;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_META_N_PAGES")]
	public const string META_N_PAGES;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_META_N_SUBIFDS")]
	public const string META_N_SUBIFDS;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_META_ORIENTATION")]
	public const string META_ORIENTATION;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_META_PAGE_HEIGHT")]
	public const string META_PAGE_HEIGHT;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_META_PHOTOSHOP_NAME")]
	public const string META_PHOTOSHOP_NAME;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_META_RESOLUTION_UNIT")]
	public const string META_RESOLUTION_UNIT;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_META_SEQUENTIAL")]
	public const string META_SEQUENTIAL;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_META_XMP_NAME")]
	public const string META_XMP_NAME;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_MICRO_VERSION")]
	public const int MICRO_VERSION;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_MINOR_VERSION")]
	public const int MINOR_VERSION;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_TRANSFORM_SCALE")]
	public const int TRANSFORM_SCALE;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_TRANSFORM_SHIFT")]
	public const int TRANSFORM_SHIFT;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_VERSION")]
	public const string VERSION;
	[CCode (cheader_filename = "vips/vips.h", cname = "VIPS_VERSION_STRING")]
	public const string VERSION_STRING;
	[CCode (cheader_filename = "vips/vips.h")]
	public static void _object_set_member (Vips.Object object, GLib.ParamSpec pspec, GLib.Object member, GLib.Object argument);
	[CCode (cheader_filename = "vips/vips.h")]
	public static void add_option_entries (GLib.OptionGroup option_group);
	[CCode (cheader_filename = "vips/vips.h")]
	[Version (replacement = "Area.free_cb")]
	public static int area_free_cb (void* mem, Vips.Area area);
	[CCode (cheader_filename = "vips/vips.h")]
	[Version (replacement = "BandFormat.is8bit")]
	public static bool band_format_is8bit (Vips.BandFormat format);
	[CCode (cheader_filename = "vips/vips.h")]
	[Version (replacement = "BandFormat.iscomplex")]
	public static bool band_format_iscomplex (Vips.BandFormat format);
	[CCode (cheader_filename = "vips/vips.h")]
	[Version (replacement = "BandFormat.isfloat")]
	public static bool band_format_isfloat (Vips.BandFormat format);
	[CCode (cheader_filename = "vips/vips.h")]
	[Version (replacement = "BandFormat.isint")]
	public static bool band_format_isint (Vips.BandFormat format);
	[CCode (cheader_filename = "vips/vips.h")]
	[Version (replacement = "BandFormat.isuint")]
	public static bool band_format_isuint (Vips.BandFormat format);
	[CCode (cheader_filename = "vips/vips.h")]
	[Version (replacement = "Blob.copy")]
	public static Vips.Blob blob_copy ([CCode (array_length_cname = "length", array_length_pos = 1.1, array_length_type = "gsize")] uint8[] data);
	[CCode (cheader_filename = "vips/vips.h")]
	public static void block_untrusted_set (bool state);
	[CCode (cheader_filename = "vips/vips.h")]
	public static void cache_drop_all ();
	[CCode (cheader_filename = "vips/vips.h")]
	public static int cache_get_max ();
	[CCode (cheader_filename = "vips/vips.h")]
	public static int cache_get_max_files ();
	[CCode (cheader_filename = "vips/vips.h")]
	public static size_t cache_get_max_mem ();
	[CCode (cheader_filename = "vips/vips.h")]
	public static int cache_get_size ();
	[CCode (cheader_filename = "vips/vips.h")]
	public static void cache_operation_add (Vips.Operation operation);
	[CCode (cheader_filename = "vips/vips.h")]
	public static Vips.Operation cache_operation_build (Vips.Operation operation);
	[CCode (cheader_filename = "vips/vips.h")]
	public static Vips.Operation cache_operation_lookup (Vips.Operation operation);
	[CCode (cheader_filename = "vips/vips.h")]
	public static void cache_print ();
	[CCode (cheader_filename = "vips/vips.h")]
	public static void cache_set_dump (bool dump);
	[CCode (cheader_filename = "vips/vips.h")]
	public static void cache_set_max (int max);
	[CCode (cheader_filename = "vips/vips.h")]
	public static void cache_set_max_files (int max_files);
	[CCode (cheader_filename = "vips/vips.h")]
	public static void cache_set_max_mem (size_t max_mem);
	[CCode (cheader_filename = "vips/vips.h")]
	public static void cache_set_trace (bool trace);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int call_argv (Vips.Operation operation, int argc, string argv);
	[CCode (cheader_filename = "vips/vips.h")]
	public static void call_options (GLib.OptionGroup group, Vips.Operation operation);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int check_8or16 (string domain, Vips.Image im);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int check_bandno (string domain, Vips.Image im, int bandno);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int check_bands (string domain, Vips.Image im, int bands);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int check_bands_1or3 (string domain, Vips.Image im);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int check_bands_1orn (string domain, Vips.Image im1, Vips.Image im2);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int check_bands_1orn_unary (string domain, Vips.Image im, int n);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int check_bands_atleast (string domain, Vips.Image im, int bands);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int check_bands_same (string domain, Vips.Image im1, Vips.Image im2);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int check_coding (string domain, Vips.Image im, Vips.Coding coding);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int check_coding_known (string domain, Vips.Image im);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int check_coding_noneorlabq (string domain, Vips.Image im);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int check_coding_same (string domain, Vips.Image im1, Vips.Image im2);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int check_complex (string domain, Vips.Image im);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int check_format (string domain, Vips.Image im, Vips.BandFormat fmt);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int check_format_same (string domain, Vips.Image im1, Vips.Image im2);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int check_hist (string domain, Vips.Image im);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int check_int (string domain, Vips.Image im);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int check_matrix (string domain, Vips.Image im, out Vips.Image @out);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int check_mono (string domain, Vips.Image im);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int check_noncomplex (string domain, Vips.Image im);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int check_oddsquare (string domain, Vips.Image im);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int check_precision_intfloat (string domain, Vips.Precision precision);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int check_separable (string domain, Vips.Image im);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int check_size_same (string domain, Vips.Image im1, Vips.Image im2);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int check_twocomponents (string domain, Vips.Image im);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int check_u8or16 (string domain, Vips.Image im);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int check_u8or16orf (string domain, Vips.Image im);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int check_uint (string domain, Vips.Image im);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int check_uintorf (string domain, Vips.Image im);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int check_uncoded (string domain, Vips.Image im);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int check_vector (string domain, int n, Vips.Image im);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int check_vector_length (string domain, int n, int len);
	[CCode (cheader_filename = "vips/vips.h")]
	public static float col_C2Ccmc (float C);
	[CCode (cheader_filename = "vips/vips.h")]
	public static float col_Ccmc2C (float Ccmc);
	[CCode (cheader_filename = "vips/vips.h")]
	public static void col_Ch2ab (float C, float h, float a, float b);
	[CCode (cheader_filename = "vips/vips.h")]
	public static float col_Ch2hcmc (float C, float h);
	[CCode (cheader_filename = "vips/vips.h")]
	public static float col_Chcmc2h (float C, float hcmc);
	[CCode (cheader_filename = "vips/vips.h")]
	public static float col_L2Lcmc (float L);
	[CCode (cheader_filename = "vips/vips.h")]
	public static void col_Lab2XYZ (float L, float a, float b, out float X, out float Y, out float Z);
	[CCode (cheader_filename = "vips/vips.h")]
	public static float col_Lcmc2L (float Lcmc);
	[CCode (cheader_filename = "vips/vips.h")]
	public static void col_XYZ2Lab (float X, float Y, float Z, out float L, out float a, out float b);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int col_XYZ2scRGB (float X, float Y, float Z, out float R, out float G, out float B);
	[CCode (cheader_filename = "vips/vips.h")]
	public static void col_ab2Ch (float a, float b, float C, float h);
	[CCode (cheader_filename = "vips/vips.h")]
	public static double col_ab2h (double a, double b);
	[CCode (cheader_filename = "vips/vips.h")]
	public static float col_dE00 (float L1, float a1, float b1, float L2, float a2, float b2);
	[CCode (cheader_filename = "vips/vips.h")]
	public static void col_make_tables_CMC ();
	[CCode (cheader_filename = "vips/vips.h")]
	public static int col_sRGB2scRGB_16 (int r, int g, int b, float R, float G, float B);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int col_sRGB2scRGB_16_noclip (int r, int g, int b, float R, float G, float B);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int col_sRGB2scRGB_8 (int r, int g, int b, float R, float G, float B);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int col_sRGB2scRGB_8_noclip (int r, int g, int b, float R, float G, float B);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int col_scRGB2BW_16 (float R, float G, float B, int g, int og);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int col_scRGB2BW_8 (float R, float G, float B, int g, int og);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int col_scRGB2XYZ (float R, float G, float B, out float X, out float Y, out float Z);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int col_scRGB2sRGB_16 (float R, float G, float B, int r, int g, int b, int og);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int col_scRGB2sRGB_8 (float R, float G, float B, int r, int g, int b, int og);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int concurrency_get ();
	[CCode (cheader_filename = "vips/vips.h")]
	public static void concurrency_set (int concurrency);
	[CCode (cheader_filename = "vips/vips.h")]
	public static unowned string error_buffer ();
	[CCode (cheader_filename = "vips/vips.h")]
	public static string error_buffer_copy ();
	[CCode (cheader_filename = "vips/vips.h")]
	public static void error_clear ();
	[CCode (cheader_filename = "vips/vips.h")]
	public static void error_freeze ();
	[CCode (cheader_filename = "vips/vips.h")]
	public static void error_g () throws GLib.Error;
	[CCode (cheader_filename = "vips/vips.h")]
	public static void error_thaw ();
	[CCode (cheader_filename = "vips/vips.h")]
	public static string filename_get_filename (string vips_filename);
	[CCode (cheader_filename = "vips/vips.h")]
	public static string filename_get_options (string vips_filename);
	[CCode (cheader_filename = "vips/vips.h")]
	public static uint64 format_sizeof (Vips.BandFormat format);
	[CCode (cheader_filename = "vips/vips.h")]
	public static void g_error () throws GLib.Error;
	[CCode (cheader_filename = "vips/vips.h")]
	public static unowned string get_argv0 ();
	[CCode (cheader_filename = "vips/vips.h")]
	public static uint64 get_disc_threshold ();
	[CCode (cheader_filename = "vips/vips.h")]
	public static unowned string get_prgname ();
	[CCode (cheader_filename = "vips/vips.h")]
	public static unowned string guess_libdir (string argv0, string env_name);
	[CCode (cheader_filename = "vips/vips.h")]
	public static unowned string guess_prefix (string argv0, string env_name);
	[CCode (cheader_filename = "vips/vips.h")]
	public static bool icc_is_compatible_profile (Vips.Image image, void* data, size_t data_length);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int icc_present ();
	[CCode (cheader_filename = "vips/vips.h")]
	public static int init (string argv0);
	[CCode (cheader_filename = "vips/vips.h")]
	public static void leak_set (bool leak);
	[CCode (cheader_filename = "vips/vips.h")]
	public static void* malloc (Vips.Object? object, size_t size);
	[CCode (cheader_filename = "vips/vips.h")]
	public static unowned string nickname_find (GLib.Type type);
	[CCode (cheader_filename = "vips/vips.h")]
	public static string path_filename7 (string path);
	[CCode (cheader_filename = "vips/vips.h")]
	public static string path_mode7 (string path);
	[CCode (cheader_filename = "vips/vips.h")]
	[Version (replacement = "Progress.set")]
	public static void progress_set (bool progress);
	[CCode (cheader_filename = "vips/vips.h")]
	public static float pythagoras (float L1, float a1, float b1, float L2, float a2, float b2);
	[CCode (cheader_filename = "vips/vips.h")]
	public static void shutdown ();
	[CCode (cheader_filename = "vips/vips.h")]
	public static string strdup (Vips.Object? object, string str);
	[CCode (cheader_filename = "vips/vips.h")]
	public static void thread_shutdown ();
	[CCode (cheader_filename = "vips/vips.h")]
	public static int tracked_close (int fd);
	[CCode (cheader_filename = "vips/vips.h")]
	public static void tracked_free (owned void* s);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int tracked_get_allocs ();
	[CCode (cheader_filename = "vips/vips.h")]
	public static int tracked_get_files ();
	[CCode (cheader_filename = "vips/vips.h")]
	public static size_t tracked_get_mem ();
	[CCode (cheader_filename = "vips/vips.h")]
	public static size_t tracked_get_mem_highwater ();
	[CCode (cheader_filename = "vips/vips.h")]
	public static void* tracked_malloc (size_t size);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int tracked_open (string pathname, int flags, int mode);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int type_depth (GLib.Type type);
	[CCode (cheader_filename = "vips/vips.h")]
	public static GLib.Type type_find (string basename, string nickname);
	[CCode (cheader_filename = "vips/vips.h")]
	public static void* value_get_area (GLib.Value value, out size_t length);
	[CCode (cheader_filename = "vips/vips.h")]
	public static void* value_get_array (GLib.Value value, out int n, out GLib.Type type, out size_t sizeof_type);
	[CCode (array_length_pos = 1.1, cheader_filename = "vips/vips.h")]
	public static unowned double[] value_get_array_double (GLib.Value value);
	[CCode (array_length_pos = 1.1, cheader_filename = "vips/vips.h")]
	public static unowned Vips.Image[] value_get_array_image (GLib.Value value);
	[CCode (array_length_pos = 1.1, cheader_filename = "vips/vips.h")]
	public static unowned int[] value_get_array_int (GLib.Value value);
	[CCode (array_length_pos = 1.1, array_length_type = "gsize", cheader_filename = "vips/vips.h")]
	public static unowned uint8[] value_get_blob (GLib.Value value);
	[CCode (cheader_filename = "vips/vips.h")]
	public static unowned string value_get_ref_string (GLib.Value value, out size_t length);
	[CCode (cheader_filename = "vips/vips.h")]
	public static unowned string value_get_save_string (GLib.Value value);
	[CCode (cheader_filename = "vips/vips.h")]
	public static bool value_is_null (GLib.ParamSpec psoec, GLib.Value value);
	[CCode (cheader_filename = "vips/vips.h")]
	public static void value_set_area (GLib.Value value, [CCode (scope = "async")] Vips.CallbackFn? free_fn);
	[CCode (cheader_filename = "vips/vips.h")]
	public static void value_set_array (out GLib.Value value, int n, GLib.Type type, size_t sizeof_type);
	[CCode (cheader_filename = "vips/vips.h")]
	public static void value_set_array_double (GLib.Value value, [CCode (array_length_cname = "n", array_length_pos = 2.1)] double[]? array);
	[CCode (cheader_filename = "vips/vips.h")]
	public static void value_set_array_image (GLib.Value value, int n);
	[CCode (cheader_filename = "vips/vips.h")]
	public static void value_set_array_int (GLib.Value value, [CCode (array_length_cname = "n", array_length_pos = 2.1)] int[]? array);
	[CCode (cheader_filename = "vips/vips.h")]
	public static void value_set_array_object (out GLib.Value value, int n);
	[CCode (cheader_filename = "vips/vips.h")]
	public static void value_set_blob (out GLib.Value value, [CCode (scope = "async")] Vips.CallbackFn? free_fn, [CCode (array_length_cname = "length", array_length_pos = 3.1, array_length_type = "gsize")] owned uint8[] data);
	[CCode (cheader_filename = "vips/vips.h")]
	public static void value_set_blob_free (GLib.Value value, [CCode (array_length_cname = "length", array_length_pos = 2.1, array_length_type = "gsize")] owned uint8[] data);
	[CCode (cheader_filename = "vips/vips.h")]
	public static void value_set_ref_string (out GLib.Value value, string str);
	[CCode (cheader_filename = "vips/vips.h")]
	public static void value_set_save_string (out GLib.Value value, string str);
	[CCode (cheader_filename = "vips/vips.h")]
	public static int version (int flag);
	[CCode (cheader_filename = "vips/vips.h")]
	public static unowned string version_string ();
}
